import tkinter as tk
from tkinter import ttk, scrolledtext
from scapy.all import sniff
import threading

class PacketSnifferGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Python Packet Sniffer")
        self.root.geometry("800x600")
        self.root.configure(bg="#f0f0f0")  # Light gray background

        self.is_sniffing = False  # Sniffing state
        self.sniff_thread = None  # Thread for sniffing

        # Create UI elements
        self.create_widgets()

    def create_widgets(self):
        """Creates the GUI elements."""
        # Header
        header_frame = tk.Frame(self.root, bg="#007BFF", pady=20)
        header_frame.place(relx=0.5, rely=0.05, anchor="n", relwidth=0.9)  # Centered header
        header_label = tk.Label(header_frame, text="Network Packet Sniffer", font=("Helvetica", 18, "bold"), fg="white", bg="#007BFF")
        header_label.pack()

        # Sniffing Control Frame
        control_frame = tk.Frame(self.root, bg="#f0f0f0", pady=10)
        control_frame.place(relx=0.5, rely=0.2, anchor="n")  # Centered buttons
        self.start_button = ttk.Button(control_frame, text="Start Sniffing", style="W.TButton", command=self.start_sniffing)
        self.start_button.grid(row=0, column=0, padx=15, pady=10)

        self.stop_button = ttk.Button(control_frame, text="Stop Sniffing", style="W.TButton", command=self.stop_sniffing, state=tk.DISABLED)
        self.stop_button.grid(row=0, column=1, padx=15, pady=10)

        # Filter Frame
        filter_frame = tk.Frame(self.root, bg="#f0f0f0", pady=10)
        filter_frame.place(relx=0.5, rely=0.35, anchor="n")
        self.filter_label = ttk.Label(filter_frame, text="Filter (tcp, udp, icmp, all):", background="#f0f0f0", foreground="black", font=("Helvetica", 10))
        self.filter_label.pack(side=tk.LEFT, padx=10)

        self.filter_entry = ttk.Entry(filter_frame, font=("Helvetica", 12))
        self.filter_entry.insert(0, "all")
        self.filter_entry.pack(side=tk.LEFT, padx=10, fill="x", expand=True)

        # Packet Display Frame
        packet_frame = tk.Frame(self.root, bg="#f0f0f0", pady=10)
        packet_frame.place(relx=0.5, rely=0.5, anchor="n", relwidth=0.9)
        self.text_area = scrolledtext.ScrolledText(packet_frame, width=100, height=15, wrap=tk.WORD, font=("Courier", 10))
        self.text_area.pack(padx=10, pady=10)

        # Status Bar
        self.status_bar = tk.Label(self.root, text="Ready", bg="#007BFF", fg="white", anchor="w", padx=10, pady=5)
        self.status_bar.pack(side=tk.BOTTOM, fill="x")

        # Style for buttons
        style = ttk.Style()
        style.configure("W.TButton", font=("Helvetica", 12), padding=10, width=20, background="#007BFF", foreground="white")
        style.map("W.TButton", background=[("active", "#0056b3")], foreground=[("active", "white")])

    def packet_callback(self, packet):
        """Handles captured packets."""
        packet_info = packet.summary()
        self.text_area.insert(tk.END, packet_info + "\n")
        self.text_area.yview(tk.END)  # Auto-scroll
        self.status_bar.config(text=f"Captured {self.text_area.index(tk.END)} packets")

    def start_sniffing(self):
        """Starts packet sniffing in a separate thread."""
        self.is_sniffing = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.status_bar.config(text="Sniffing...")

        self.text_area.insert(tk.END, "Starting packet sniffing...\n")

        # Get filter type
        filter_type = self.filter_entry.get().strip().lower()
        if filter_type == "all":
            filter_type = None  # No filter applied

        # Start Sniffing in a Thread
        self.sniff_thread = threading.Thread(target=self.sniff_packets, args=(filter_type,))
        self.sniff_thread.start()

    def sniff_packets(self, filter_type):
        """Sniffs packets based on filter."""
        sniff(prn=self.packet_callback, filter=filter_type, store=False, stop_filter=lambda x: not self.is_sniffing)

    def stop_sniffing(self):
        """Stops packet sniffing."""
        self.is_sniffing = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.status_bar.config(text="Sniffing stopped.")

# Run GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = PacketSnifferGUI(root)
    root.mainloop()
